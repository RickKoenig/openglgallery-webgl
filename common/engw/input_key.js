// some conversion tables

// standard keys mostly ascii
var keycodes = {
// 00's 10 of them () done
	LEFTSHIFT:0x01,
	RIGHTSHIFT:0x02,
	SHIFT:0x01, // for now tie to LEFTSHIFT
	LEFTCTRL:0x03,
	RIGHTCTRL:0x04,
	CTRL:0x03,
	LEFTALT:0x05,
	RIGHTALT:0x06,
	ALT:0x05,
	CAPSLOCK:0x07,
	BACKSPACE:0x08, // ascii '\b'
	TAB:0x09, // ascii '\t'
	RETURN:0x0a, // ascii '\r'
	NUM5:0x0c,
// 10's 14 of them () done
	PRINTSCREEN:0x10,
	SCROLLLOCK:0x11,
	PAUSE:0x12,
	INSERT:0x13,
	DELETE:0x14,
	HOME:0x15,
	END:0x16,
	PAGEUP:0x17,
	PAGEDOWN:0x18,
	ESCAPE:0x1b, // ascii
	LEFT:0x1c,
	RIGHT:0x1d,
	UP:0x1e,
	DOWN:0x1f,
// 20's 16 of them () done
// 30's 16 of them () done
// 40's 16 of them () done
// 50's 16 of them () done
// 60's 16 of them () done
// 70's 15 of them () done
// 80's  5 of them () done
	NUMLOCK:0x81,
	NUMSLASH:0x82,
	NUMMINUS:0x83,
	NUMDEL:0x84,
	NUMENTER:0x85,
// 90's 12 of them () done
	F1:0x90, // function keys
	F2:0x91,
	F3:0x92,
	F4:0x93,
	F5:0x94,
	F6:0x95,
	F7:0x96,
	F8:0x97,
	F9:0x98,
	F10:0x99,
	F11:0x9a,
	F12:0x9b,
// a0's 13 of them () done
	NUMINSERT:0xa0,
	NUMEND:0xa1,
	NUMDOWN:0xa2,
	NUMPAGEDOWN:0xa3,
	NUMLEFT:0xa4,
	NUM5:0xa5,
	NUMRIGHT:0xa6,
	NUMHOME:0xa7,
	NUMUP:0xa8,
	NUMPAGEUP:0xa9,
	LEFTWINDOWS:0xab, // 'windows' keys
	RIGHTWINDOWS:0xac,
	WINDOWS:0xab,
	MENU:0xad,
/*	"up":0x26,
	"down":0x28,
	"left":0x25,
	"right":0x27,
	"pagegup":0x21,
	"pagegdown":0x22,
	//"squareleft":219,
	//"squareright":221 */
};

var kukd2ascii = [ // convert keydown and keyups to ascii like keycodes
	0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x08,0x09,0x00,0x00, 0xa5,0x0a,0x00,0x00, // 00
	0x01,0x03,0x05,0x12, 0x07,0x00,0x00,0x00, 0x00,0x00,0x00,0x1b, 0x00,0x00,0x00,0x00, // 10
	0x20,0x17,0x18,0x16, 0x15,0x1c,0x1e,0x1d, 0x1f,0x00,0x00,0x00, 0x00,0x13,0x14,0x00, // 20
	0x30,0x31,0x32,0x33, 0x34,0x35,0x36,0x37, 0x38,0x39,0x00,0x3b, 0x00,0x3d,0x00,0x00, // 30
	
	0x00,0x61,0x62,0x63, 0x64,0x65,0x66,0x67, 0x68,0x69,0x6a,0x6b, 0x6c,0x6d,0x6e,0x6f, // 40
	0x70,0x71,0x72,0x73, 0x74,0x75,0x76,0x77, 0x78,0x79,0x7a,0xab, 0x00,0xad,0x00,0x00, // 50
	0x30,0x31,0x32,0x33, 0x34,0x35,0x36,0x37, 0x38,0x39,0x2a,0x2b, 0x00,0x2d,0x2e,0x2f, // 60
	0x90,0x91,0x92,0x93, 0x94,0x95,0x96,0x97, 0x98,0x99,0x9a,0x9b, 0x00,0x00,0x00,0x00, // 70
	
	0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, // 80
	0x81,0x11,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, // 90
	0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x2d,0x00,0x00, // a0
	0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x3b,0x3d, 0x2c,0x2d,0x2e,0x2f, // b0
	
	0x60,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, // c0
	0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x5b, 0x5c,0x5d,0x27,0x00, // d0
	0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, // e0
	0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, // f0
];

var noshift2shift = [ // apply shift to ascii characters
	0x00,0x01,0x02,0x03, 0x04,0x05,0x06,0x07, 0x08,0x09,0x0a,0x0b, 0x0c,0x0d,0x0e,0x0f, // 00
	0x10,0x11,0x12,0x13, 0x14,0x15,0x16,0x17, 0x18,0x19,0x1a,0x1b, 0x1c,0x1d,0x1e,0x1f, // 10
	0x20,0x21,0x22,0x23, 0x24,0x25,0x26,0x22, 0x28,0x29,0x2a,0x2b, 0x3c,0x5f,0x3e,0x3f, // 20 , 5 of them
	0x29,0x21,0x40,0x23, 0x24,0x25,0x5e,0x26, 0x2a,0x28,0x3a,0x3a, 0x3c,0x2b,0x3e,0x3f, // 30 , 12 of them

	0x40,0x41,0x42,0x43, 0x44,0x45,0x46,0x47, 0x48,0x49,0x4a,0x4b, 0x4c,0x4d,0x4e,0x4f, // 40 , 0 of them
	0x50,0x51,0x52,0x53, 0x54,0x55,0x56,0x57, 0x58,0x59,0x5a,0x7b, 0x7c,0x7d,0x5e,0x5f, // 50 , 3 of them
	0x7e,0x41,0x42,0x43, 0x44,0x45,0x46,0x47, 0x48,0x49,0x4a,0x4b, 0x4c,0x4d,0x4e,0x4f, // 60 , 16 of them
	0x50,0x51,0x52,0x53, 0x54,0x55,0x56,0x57, 0x58,0x59,0x5a,0x7b, 0x7c,0x7d,0x7e,0x7f, // 70 , 11 of them

	0x80,0x81,0x82,0x83, 0x84,0x85,0x86,0x87, 0x88,0x89,0x8a,0x8b, 0x8c,0x8d,0x8e,0x8f, // 80
	0x90,0x91,0x92,0x93, 0x94,0x95,0x96,0x97, 0x98,0x99,0x9a,0x9b, 0x9c,0x9d,0x9e,0x9f, // 90
	0xa0,0xa1,0xa2,0xa3, 0xa4,0xa5,0xa6,0xa7, 0xa8,0xa9,0xaa,0xab, 0xac,0xad,0xae,0xaf, // a0
	0xb0,0xb1,0xb2,0xb3, 0xb4,0xb5,0xb6,0xb7, 0xb8,0xb9,0xba,0xbb, 0xbc,0xbd,0xbe,0xbf, // b0

	0xc0,0xc1,0xc2,0xc3, 0xc4,0xc5,0xc6,0xc7, 0xc8,0xc9,0xca,0xcb, 0xcc,0xcd,0xce,0xcf, // c0
	0xd0,0xd1,0xd2,0xd3, 0xd4,0xd5,0xd6,0xd7, 0xd8,0xd9,0xda,0xdb, 0xdc,0xdd,0xde,0xdf, // d0
	0xe0,0xe1,0xe2,0xe3, 0xe4,0xe5,0xe6,0xe7, 0xe8,0xe9,0xea,0xeb, 0xec,0xed,0xee,0xef, // e0
	0xf0,0xf1,0xf2,0xf3, 0xf4,0xf5,0xf6,0xf7, 0xf8,0xf9,0xfa,0xfb, 0xfc,0xfd,0xfe,0xff, // f0
];

var keystatecur;
var keystatehold;
function isbrowserdebugkey(k) {
	return k == keycodes.F12;
}

function getkey() {
	var ret = input.keybuff.shift();
	if (!ret)
		return 0;
	return ret;
}

function getkeycode(e) {
	if (e.keyCode)
		return e.keyCode;
	return e.charCode;
}

// event
function bkeyp(e) {
	inputevents += "(KP " + getkeycode(e).toString(16) + ") ";
	//if (input.keybuff.length < 4)
	//	input.keybuff.push(getkeycode(e));
//	if (isbrowserdebugkey())
//		return;
	//if (getkeycode(e) == debugkey)
	//	return;
//	e.returnValue = false;
//	if (e.preventDefault)
//		e.preventDefault();
}

// event
function bkeyd(e) {
	var maxbuflen = 4;
	var val = getkeycode(e);
	inputevents += "(KD " + val.toString(16) + ") ";
	val = kukd2ascii[val];
	if (val) {
		keystatecur[val] = 1;
		keystatehold[val] = 1;
		if (input.keybuff.length < maxbuflen) {
			if (keystatehold[keycodes.SHIFT]) // no nudges for SHIFT
				val = noshift2shift[val];
			if (val != keycodes.SHIFT) // don't push SHIFT
				input.keybuff.push(val);
		}
		if (isbrowserdebugkey(val))
			return;
	}
	e.returnValue = false;
	if (e.preventDefault)
		e.preventDefault();
}

// event
function bkeyu(e) {
	var val = getkeycode(e);
	inputevents += "(KU " + val.toString(16) + ") ";
	val = kukd2ascii[val];
	if (val) {
		keystatehold[val] = 0;
		if (isbrowserdebugkey(val))
			return;
	}
	e.returnValue = false;
	if (e.preventDefault)
		e.preventDefault();
}

function keyinit() {
	keystatecur = new Array(); // keycode keys currently down 0 or 1, indexed by keycode
	keystatehold = new Array(); // keycode keys currently down 0 or 1, indexed by keycode
/*	var body = document.body;
	//var body = null;
	//body = document.getElementById('drawarea');
	//if (!body)
	//	body = document.getElementById('mycanvas2');
	body.onkeydown = bkeyd;
	body.onkeypress = bkeyp;
	body.onkeyup = bkeyu; */
	var keyarea = null;
	//if (!keyarea)
	//	keyarea = document.keyarea;
	if (!keyarea)
		keyarea = document.getElementById('drawarea');
	//if (!keyarea)
	//	keyarea = document.getElementById('mycanvas2');
	keyarea.focus();
	keyarea.addEventListener('keydown',bkeyd,false);
	keyarea.addEventListener('keypress',bkeyp,false);
	keyarea.addEventListener('keyup',bkeyu,false);
}

function keyproc()
{
	// buffered keyboard input
	input.key = getkey();
	// keystate, allow for nudges
	input.keystate = keystatecur;
	keystatecur = keystatehold.slice(0); // copy array
}
